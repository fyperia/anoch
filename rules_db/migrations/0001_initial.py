# Generated by Django 5.0.7 on 2024-11-04 20:28

import django.db.models.deletion
import prose.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('core', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Entry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('description', models.TextField(help_text='A description of what the entry represents in-game.')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_%(app_label)s.%(class)s_set+', to='contenttypes.contenttype')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='ClassOptions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(help_text='A description of what the entry represents in-game.')),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'verbose_name': 'Class Option',
                'verbose_name_plural': 'Class Options',
            },
        ),
        migrations.CreateModel(
            name='Type',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(help_text='A description of what the entry represents in-game.')),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'verbose_name': 'Skill Type',
                'verbose_name_plural': 'Skill Types',
            },
        ),
        migrations.CreateModel(
            name='SkillDomain',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(help_text='A description of what the entry represents in-game.')),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'verbose_name': 'Skill Domain',
                'verbose_name_plural': 'Skill Domains',
            },
        ),
        migrations.CreateModel(
            name='SkillOptions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(help_text='A description of what the entry represents in-game.')),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'verbose_name': 'Skill Option',
                'verbose_name_plural': 'Skill Options',
            },
        ),
        migrations.CreateModel(
            name='CharacterClass',
            fields=[
                ('entry_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='rules_db.entry')),
                ('body_points', models.IntegerField(default=0)),
                ('class_type', models.CharField(choices=[('B', 'Base Class'), ('M', 'Master Class'), ('E', 'Exalted Class'), ('S', 'Subclass'), ('C', 'Common/Background'), ('N', 'NPC Only')], default='B', max_length=1)),
                ('class_options_help', models.CharField(blank=True, help_text='A description of what the class options are for. Blank if n/a. Text is visible to players.', max_length=50, null=True)),
                ('class_options', models.ManyToManyField(blank=True, help_text='Available class choices, i.e. casting source, subclass, etc.', related_name='character_classes', to='rules_db.classoptions')),
            ],
            options={
                'verbose_name': 'class',
                'verbose_name_plural': 'classes',
                'ordering': ['name'],
            },
            bases=('rules_db.entry',),
        ),
        migrations.CreateModel(
            name='Component',
            fields=[
                ('entry_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='rules_db.entry')),
                ('component_type', models.CharField(choices=[('BU', 'Unrefined (Basic)'), ('BR', 'Refined (Basic)'), ('BE', 'Equipment (Basic)'), ('RL', 'Lesser (Ritual)'), ('RG', 'Greater (Ritual)'), ('RU', 'Unique (Ritual)'), ('SP', 'Special')], max_length=2)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('rules_db.entry',),
        ),
        migrations.CreateModel(
            name='Effect',
            fields=[
                ('entry_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='rules_db.entry')),
                ('mechanics', models.TextField(help_text='The specific rules mechanics of the effect.')),
                ('duration', models.IntegerField(default=-1, help_text='The standard duration of the effect in seconds. -1 for N/A or instant.')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('rules_db.entry',),
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('entry_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='rules_db.entry')),
                ('mechanics', models.TextField(help_text='The specific rules mechanics of the ability.')),
                ('cost', models.IntegerField(verbose_name='Build Cost')),
                ('types', models.ManyToManyField(related_name='skills', to='rules_db.type')),
            ],
            options={
                'ordering': ['name'],
            },
            bases=('rules_db.entry',),
        ),
        migrations.CreateModel(
            name='EquipmentType',
            fields=[
                ('type_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='rules_db.type')),
                ('category', models.CharField(choices=[('HW', 'Weapon'), ('HS', 'Secondary'), ('AC', 'Accessory'), ('AR', 'Armor')], max_length=2)),
            ],
            options={
                'verbose_name': 'Equipment Type',
                'verbose_name_plural': 'Equipment Types',
            },
            bases=('rules_db.type',),
        ),
        migrations.CreateModel(
            name='Page',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='rules_db.entry')),
            ],
        ),
        migrations.CreateModel(
            name='RulesChapter',
            fields=[
                ('chapter_number', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Name of chapter - do not include the chapter number.', max_length=255)),
                ('introduction', models.OneToOneField(help_text='Non-mechanical introduction of the chapter.', on_delete=django.db.models.deletion.CASCADE, to='core.articlecontent')),
            ],
        ),
        migrations.CreateModel(
            name='RulesArticle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('slug', models.SlugField(unique=True)),
                ('excerpt', prose.fields.RichTextField(blank=True, null=True)),
                ('publish_datetime', models.DateTimeField()),
                ('status', models.CharField(choices=[('D', 'Draft'), ('P', 'Published')], default='D', max_length=1)),
                ('sort_order', models.IntegerField(help_text='Ascending order within chapter; same numbers will sort alphabetically.')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('body', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='core.articlecontent')),
                ('tags', models.ManyToManyField(to='core.articletag')),
                ('chapter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rules_db.ruleschapter')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SkillAlias',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alias_name', models.CharField(blank=True, help_text='The name the skill appears as on the specified class.', max_length=50, null=True)),
                ('alias_description', models.TextField(blank=True, help_text='The flavor description specific to the class the alias belongs to.', null=True)),
                ('alias_criteria', models.TextField(blank=True, help_text='For Exalted skill aliases only, to override the base criteria.', null=True)),
                ('alias_domain', models.ForeignKey(blank=True, help_text='For spells/talents etc where the domain may differ class to class.', null=True, on_delete=django.db.models.deletion.CASCADE, to='rules_db.skilldomain')),
                ('parent_skill', models.ForeignKey(blank=True, help_text='The baseline skill providing the mechanics.', null=True, on_delete=django.db.models.deletion.CASCADE, to='rules_db.skill')),
            ],
            options={
                'verbose_name_plural': 'Skill Aliases',
            },
        ),
        migrations.CreateModel(
            name='ExaltedSkill',
            fields=[
                ('skill_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='rules_db.skill')),
                ('criteria_type', models.CharField(choices=[('Q', 'Quest'), ('A', 'Achievement')], max_length=1)),
                ('criteria', models.TextField(help_text='The full text of requirements to be met before the skill can be learned.', verbose_name='unlock criteria')),
                ('exalted_type', models.CharField(choices=[('EP', 'Passive'), ('ES', 'Exalted Slot'), ('EC', 'Capstone')], max_length=2, verbose_name='exalted skill type')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('rules_db.skill',),
        ),
        migrations.CreateModel(
            name='PassiveSkill',
            fields=[
                ('skill_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='rules_db.skill')),
                ('ability_type', models.CharField(choices=[('PS', 'Passive'), ('PF', 'Proficiency'), ('PG', 'Paragon')], help_text='Passives are learned only once; proficiencies stack.', max_length=2, verbose_name='passive type')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('rules_db.skill',),
        ),
        migrations.CreateModel(
            name='PeriodicSkill',
            fields=[
                ('skill_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='rules_db.skill')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('rules_db.skill',),
        ),
        migrations.CreateModel(
            name='UniqueMechanic',
            fields=[
                ('skill_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='rules_db.skill')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('rules_db.skill',),
        ),
        migrations.CreateModel(
            name='ClassSkills',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prerequisites', models.ForeignKey(blank=True, help_text='Set if skill is only available with certain class options, ie casting source, subclass, etc. Leave blank if available by default.', null=True, on_delete=django.db.models.deletion.CASCADE, to='rules_db.classoptions')),
                ('alias', models.OneToOneField(blank=True, help_text='Expanded options for the specified alias. Be sure to set the description for the specified class, and domain if needed.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='class_skill', to='rules_db.skillalias')),
                ('character_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rules_db.characterclass', verbose_name='class')),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rules_db.skill')),
            ],
            options={
                'verbose_name': 'skill',
                'verbose_name_plural': 'skill List',
                'unique_together': {('character_class', 'skill', 'alias')},
            },
        ),
        migrations.AddField(
            model_name='characterclass',
            name='skills',
            field=models.ManyToManyField(related_name='character_classes', through='rules_db.ClassSkills', to='rules_db.skill'),
        ),
        migrations.CreateModel(
            name='PrestigePoint',
            fields=[
                ('skill_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='rules_db.skill')),
                ('max_purchases', models.IntegerField()),
                ('options', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prestige_points', to='rules_db.skilloptions')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('rules_db.skill',),
        ),
        migrations.CreateModel(
            name='SlotSkill',
            fields=[
                ('skill_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='rules_db.skill')),
                ('rank', models.IntegerField()),
                ('ability_type', models.CharField(choices=[('S', 'Spell'), ('T', 'Talent')], max_length=1, verbose_name='slot type')),
                ('domain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skills', to='rules_db.skilldomain')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('rules_db.skill',),
        ),
        migrations.CreateModel(
            name='Ritual',
            fields=[
                ('exaltedskill_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='rules_db.exaltedskill')),
                ('time', models.IntegerField(help_text='Standard activation time in minutes.')),
                ('duration', models.IntegerField(default=1, help_text='Duration in months, including the month it is cast.')),
                ('rank', models.IntegerField(default=0)),
                ('frequency', models.CharField(help_text="Format: Nx per XYZ. I.E.: '1x per event', '3x per period'", max_length=50)),
                ('components', models.ManyToManyField(to='rules_db.component')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('rules_db.exaltedskill', models.Model),
        ),
    ]
